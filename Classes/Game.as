package{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.ui.Mouse;	import flash.utils.Timer;	import flash.events.TimerEvent;	public class Game extends MovieClip	{		private var placedThisRound:Number;		public var playScreen:GameBoard;		public var board:PlayerBoard;		public var board2:PlayerBoard;		public var board3:PlayerBoard;		public var board4:PlayerBoard;		static var player:Player;		static var second:Player;		static var third:Player;		static var fourth:Player;		static var players:Array;		static var starter:Player;		static var active:Player;		public static var cards:Array; //the images		private  var buildings:Array; //the images		public static var cardInfo:Array; //the info in the cards		public static var buildingInfo:Array; //the info in the cards		public static var paymentArray:Array;		public var buildingdeck:Array; //the data		private var cardlist:Array; //the data		static var boardCards:Array;		static var stack:Array; //the stack		public static var icons:Array;		public static var iClicked:Boolean = false;		public static var placing:Boolean = false;		public static var actions:Boolean = false;		private var justPlaced:Array;		var cardChild:Array;		public static var diceFaces:Array;		public static var boughtCards:Number;		static var c1:ClickMe = new ClickMe();		static var c2:ClickMe = new ClickMe();		static var c3:ClickMe = new ClickMe();		static var c4:ClickMe = new ClickMe();		static var b1:ClickMe = new ClickMe();		static var b2:ClickMe = new ClickMe();		static var b3:ClickMe = new ClickMe();		static var b4:ClickMe = new ClickMe();		private var eventSet:Boolean = false;		private var actionSet:Boolean = false;		private var aiListen:Boolean =false;		private var selectTest:SelectResScreen;		static var lotteryRoll:Array;		var lotteryIndex:Array;		var peopleArray:Array		var placeTimer:Timer;		private var isDone:Boolean;		public function Game()		{			boardCards = new Array();			diceFaces = new Array();			makeIcons();			players = new Array();			player = new Human("Player 1", 1);			second = new Player("Player 2", 2);			third = new Player("Player 3", 3);			fourth = new Player("Player 4", 4);			players[0] = player;			players[1] = second;			players[2] = third;			players[3] = fourth;			players[0].getBoard().x = 730.05;			players[0].getBoard().y = -1;			players[1].getBoard().x = 730.05;			players[1].getBoard().y = 170;			players[2].getBoard().x = 730.05;			players[2].getBoard().y = 341;			players[3].getBoard().x = 730.05;			players[3].getBoard().y = 512;			for(var i:int= 0; i < players.length; i++){				addChild(players[i].getBoard());				var next:int= i+1;				if (next == players.length){next = 0;}				players[i].setNext(players[next]);			}						//cards = 36,1			//buildings = 28,1			//icons = 6,5			cardlist = new Array(36);			cardInfo = new Array();			buildingInfo = new Array();			for(var i:int = 0; i < cardlist.length; i++){				cardlist[i] = i;			}			cardlist = DocumentClass.shuffle(cardlist);			var cardgroup:Cards = new Cards();			cards = DocumentClass.cutMe(cardgroup, 36, 1);			makeCards();									buildingdeck = new Array(28);			for(var i:int = 0; i < buildingdeck.length; i++){				buildingdeck[i] = i;			}			buildingdeck = DocumentClass.shuffle(buildingdeck);			var buildinggroup:Buildings = new Buildings();			buildings = DocumentClass.cutMe(buildinggroup, 28, 1);			stack = new Array(getPlayerCount());			for(var i:int= 0; i < stack.length; i++){				stack[i] = new Array();			}			makeBuildings();						cardChild = new Array(4+getPlayerCount());			peopleArray = new Array(10*getPlayerCount());			var i:int= 0;			var j:int = 0;			while(j!= 7*getPlayerCount()){				stack[i].push(buildingdeck.pop());				i = i + 1;				if(i == stack.length) i = 0;				j++;			}			playScreen = new GameBoard();			playScreen.x = 0;			playScreen.y = 0;			addChild( playScreen );			setChildIndex(playScreen,0);						boughtCards = 0;						cheat();			replenishCards();			flipBuildings();			chooseStarter();			startPlace();		}				private function cheat():void{			trace("Cheating");			for(var i:Number=0; i < players.length; i++){				players[i].giveResource(1,90);				players[i].giveResource(2,90);				players[i].giveResource(3,90);				players[i].giveResource(4,90);			}			players[0].getTools(7);		}				private function chooseStarter():void{			starter=players[0];			players[0].setStart();		}		private function noScreen(e:NavigationEvent):void{			playScreen.canActiveClick(active.getNumber());			removeChild(selectTest);		}		private function ezBuy(c:Card, n:Number):void{			trace("the n is " + n);			var tempCard:Card = c;			var area:Number = n;			paymentArray = c.getCost();			for(var i:int; i < paymentArray.length; i++){				active.loseResource(i, paymentArray[i]);			}			trace("child index is " + cardChild[n-8]);			active.updateCount();			active.addCard(c);			trace("child index was " + cardChild);			trace("child index is " + cardChild [n-8]);			trace("child index is now" + cardChild);			trace("the stack was " + stack[n-12]);			trace("Ez buying, removing child now");			trace("n is now  " + n);			trace("stack 1 is " + stack[0]);			trace("stack 2 is " + stack[1]);			trace("stack 3 is " + stack[2]);			trace("stack 4 is " + stack[3]);			trace("trying to remove at " + cardChild[n-8]);			removeImageAtArea(n);			trace("the stack is " + stack[n-12]);			trace("??");			checkTurnOver();		}		private function bought(e:NavigationEvent):void{			var tempCard:Card = selectTest.theCard();			var n:Number = selectTest.getLocation();			trace("our array was " + cardChild);			for(var i:int; i < paymentArray.length; i++){				active.loseResource(i, paymentArray[i]);			}			trace("the area code is " + selectTest.getLocation());			trace("child index is " + cardChild[selectTest.getLocation()-8]);			active.updateCount();			active.addCard(selectTest.theCard());			trace("child index was " + cardChild);			trace("child index is " + cardChild);			trace("child index is now" + cardChild[selectTest.getLocation()-8]);			trace("trying to remove at  " + cardChild[selectTest.getLocation()-8]);			trace("Number of childrean are " + numChildren);			removeImageAtArea(n);			//active.getcard/building lol						removeChild(selectTest);			/*if(active.peoplePlaced()==0){				active = active.getNext();				trace("I have finished actions, next persons turn");			}			*/			if(!tempCard.isCiv()){				trace("buying a building");				active.getPoints(tempCard.points(paymentArray));				checkTurnOver();			}			else if(tempCard.isRoll()){				playScreen.cannotClick();				playScreen.canOkay();				playScreen.addEventListener( NavigationEvent.OKAY, harvest );			}else if (tempCard.isLottery()){				addEventListener( LotteryResult.LOTTERY, sendLottery );				rollLottery();				playScreen.cannotClick();			}else{				checkTurnOver();			}		}		private function rollLottery():void {			active.addEventListener(NavigationEvent.ALLCHOSE, checkNext);			var diceArray:Array = new Array(players.length);			var results:Array = new Array(players.length);			lotteryIndex = new Array(diceArray.length);			var toprint:String= "";			trace("get here?");			toprint += active.getName() + " rolls a ";			for (var i:int=0; i<diceArray.length; i++) {				trace("or here?");				results[i] = Math.floor(Math.random()*6)+1;				toprint += results[i] + ",";				diceArray[i] = Game.getDiceFace(results[i]);				diceArray[i].x = 38*i;				diceArray[i].y = 520.05;				playScreen.addChild(diceArray[i]);				lotteryIndex[i] = playScreen.getChildIndex(diceArray[i]);				trace("or even here?");			}			trace("get hesre?");			trace(toprint);			trace("get hdere?");				dispatchEvent( new LotteryResult( LotteryResult.LOTTERY, results ) );			//chooseLottery(results);		}//merge these two when you have time		private function sendLottery(e:LotteryResult):void{			lotteryRoll = e.myArray;			var iconArray:Array = new Array(lotteryRoll.length);			//lotteryIndex = new Array(lotteryRoll.length);			trace("roll is " + lotteryRoll);			for(var i:int = 0; i < players.length; i++){				players[i].waitForLottery();				players[i].unchoose();				players[i].addEventListener( ClickEvent.CHOSE, doLottery );//waits for you to select a dice			}			for (var i:int=0; i<lotteryRoll.length; i++) {				var theicon:Number = lotteryRoll[i];				iconArray[i] = new MovieClip();				if(lotteryRoll[i]==5){					theicon = 11;				}				if(lotteryRoll[i]==6){					theicon = 10;				}				trace("now the icon is " + theicon);				iconArray[i].addChild(DocumentClass.clone(icons[theicon]));				iconArray[i].x = 0.5+38*i;				iconArray[i].y = 560.05;				iconArray[i].buttonMode = true; 				trace("added it? " + iconArray[i].x);				playScreen.addChild(iconArray[i]);				//lotteryIndex[i] = playScreen.getChildIndex(iconArray[i]);				//trace("did it add? " + lotteryIndex[i]);				iconArray[i].addEventListener( MouseEvent.CLICK, clickedArray );			}			if(!active.isHuman())active.chooseLottery();			trace("the lots is " + e.myArray);		}		private function clickedArray(e:MouseEvent):void{			var diceChose:Number = mouseX;			diceChose = Math.floor(diceChose/38)+1;			trace("dice chosen " + diceChose);			var lotTemp:Player = active;			var trials:Number = 0;			trace("lot temp is " + lotTemp.getName() + " and has he chosen?" + lotTemp.chose);			while(lotTemp.chose && trials < 100){				lotTemp = lotTemp.getNext();				trace("lottemp is " + lotTemp.getName());				trials++;			}			if(trials>90){				trace("well this failed");			}else{				lotTemp.iChose(diceChose);			}		}		private function checkNext(e:NavigationEvent):void{			if(active.peoplePlaced()==0){				active = active.getNext();				playScreen.canActiveClick(active.getNumber());				trace("checking next");				takeactions();			}					}		private function doLottery(e:ClickEvent):void{//removing the icons			trace("you chose dice " + e.area);			var dice:Number = e.area;			var theFirst:Number;			var remaining:Number = 0;			var toSubtract:Number = 0;			theFirst = lotteryIndex[dice-1]-1;			playScreen.removeChildAt(lotteryIndex[dice-1]);			trace("the index was " + lotteryIndex);			lotteryIndex[dice-1] = -1;			trace("the index is now " + lotteryIndex);			for(var i:Number = 0; i < lotteryIndex.length; i++){				if(lotteryIndex[i]!=-1){					trace("its not -1");					lotteryIndex[i]=lotteryIndex[i]-toSubtract;					trace("we subtract " + toSubtract);				}else{					trace("gotta subtract 1");					lotteryIndex[i] = -2;					toSubtract++;				}				if(lotteryIndex[i]>0){					remaining++;				}			}			remaining++;			trace(lotteryIndex[dice-1] + "s");			trace(playScreen.numChildren);			trace("the first is " + theFirst + " and the remaining numbers are " + remaining);			trace("ehhh?");			var toRemove:Number = theFirst+remaining;			trace("also remove"  + toRemove);			playScreen.removeChildAt(theFirst+remaining);			trace("the index is now finally " + lotteryIndex);			for(var i:Number = 0; i < lotteryIndex.length; i++){				if(lotteryIndex[i]> 0){					break;				}				if(i==lotteryIndex.length-1){				trace("all chose now");				active.dispatchEvent (new NavigationEvent(NavigationEvent.LOTTERYRESUME));				}			}		}		private function updateCardIndex():void{			var times:Number = 0;			trace("the index before was " + cardChild);			for(var i=0; i<numChildren; i++)			{				var mc:DisplayObject = (getChildAt(i) as DisplayObject);				//trace("the x is " + mc.x);				if(((Math.round(638.95-mc.x)%92==0)&&(mc.y==380)) || ((Math.round(255.8-mc.x)%83==0)&&(mc.y==425.5))){					trace("found a match at index " + i + "and so our array is " + cardChild);					while(cardChild[times]==-1&& times<cardChild.length){//card got bought						times++;//move on						trace("card is bought, times++, times is now " + times);					}//otherwise					cardChild[times]=i;					times++;					trace("found a match at index " + i + "and so our array after is " + cardChild);				}			}		}	private function freshUpdateCardIndex():void{//for replenishing cards or restocking buildings			trace("trying a fresh update");			var times:Number = 0;			trace("kids: " + numChildren);			for(var i=0; i<numChildren; i++)			{				trace(i);				var mc:DisplayObject = (getChildAt(i) as DisplayObject);				trace("the x is " + mc.x + " and the math round is " +Math.round(638.95-mc.x)%92 + " and the y is " + mc.y );				if(((Math.round(638.95-mc.x)%92==0)&&(mc.y==380)) || ((Math.round(255.8-mc.x)%83==0)&&(mc.y==425.5))){					trace("found a match at index " + i + "and so our array is " + cardChild);					cardChild[times]=i;					times++;					trace("found a match at index " + i + "and so our array after is " + cardChild);				}			}			trace("update done");		}		private function removeFromArray(n:Number):void{			if(n>11){//building				trace("the stack is " + stack[n-12]);				stack[n-12].shift();				trace("teh buildings " + stack[n-12]);			}else{				boardCards[n-8]=-1;			}			trace("bought somethign, the index array is now " + cardChild);			cardChild[n-8]=-1;		}		private function clicked(event:ClickEvent):void{			placedThisRound++;			justPlaced = new Array(event.area, 1, 1);			iClicked = true;			playScreen.canBeDone();			placeAt(justPlaced);			playScreen.cannotClickBut(event.area, active.workersLeft());			active.updateCount();		}		private function actions(event:ClickEvent):void{			active.takeActionAt(event.area);						var area:Number = event.area;			justPlaced = new Array(area, active.getNumber(), GameBoard.areas[area].getNumber(active.getNumber()));			iClicked = true;				removeLast(justPlaced);			active.updateCount();			playScreen.cannotClick();			if(area<5) {				playScreen.canOkay();				playScreen.addEventListener( NavigationEvent.OKAY, harvest );			} else if(event.area>7){				var tempCard:Card;				switch(event.area){					case 8:						tempCard = cardInfo[boardCards[0]];						break;					case 9:						tempCard = cardInfo[boardCards[1]];						break;					case 10:						tempCard = cardInfo[boardCards[2]];						break;					case 11:						tempCard = cardInfo[boardCards[3]];						break;					case 12:						tempCard = buildingInfo[stack[0][0]];						break;					case 13:						tempCard = buildingInfo[stack[1][0]];						break;					case 14:						tempCard = buildingInfo[stack[2][0]];						break;					default:						tempCard = buildingInfo[stack[3][0]];						break;				}				if(tempCard.getMyType()!=1){				selectTest = new SelectResScreen(tempCard, event.area);				selectTest.x = 500;				selectTest.y = 200;				selectTest.addEventListener( NavigationEvent.NORESOURCE, noScreen );				selectTest.addEventListener( NavigationEvent.BOUGHT, bought );				addChild( selectTest );				} else{					trace("its a card");					trace("the cost is " + tempCard.getCost());					if(active.canBuyType1(tempCard)){						trace("I can buy this card)");						ezBuy(tempCard, event.area);						active.buyBuilding(tempCard);					}				}			} else {				checkTurnOver();			}		}		private function removeImageAtArea(area:Number):void{			//area = 8 is card1, 9 card 2...15=stack4			trace("removing image at " + area);			var n:Number = area;			updateCardIndex();//just in case			trace("the card index is now " + cardChild);			removeChildAt(cardChild[area-8]);			updateCardIndex();			removeFromArray(n);//removes it from our array					}		private function ai(event:ClickEvent):void{			trace(active.getName() + " has clicked! at " + String(event.area));			var area:Number = event.area;			trace("the current area is " + GameBoard.areas[area].workers);			justPlaced = new Array(area, active.getNumber(), GameBoard.areas[area].getNumber(active.getNumber()));			iClicked = true;				removeLast(justPlaced);			active.updateCount();		}		private function harvest(event:NavigationEvent):void{			active.harvest();			active.updateCount();			playScreen.notOkay();			if(active.peoplePlaced()==0){				active.resetTools();				active = active.getNext();			} 			trace("harvested");			takeactions();		}		private function weDonePlacing(event:NavigationEvent):void{			if(eventSet) {				playScreen.cannotDone();				trace("i have finished, removing listeners");				removeEventListeners();				isDone = true;				placeTimer.start();				active = active.getNext();			}		}		private function unplace(event:NavigationEvent):void{			removeLast(justPlaced);		}		public function startPlace():void{			for(var i:int= 0; i < players.length; i++){				players[i].updateCount();			}						active = starter; 			placing = true;			playScreen.newRound();			isDone = false;			placedThisRound=0;			place();		}		public function allPlaced():Boolean{			var workersleft:int;			workersleft = 0;			for(var i:int= 0; i < players.length; i++){				workersleft += players[i].workersLeft();			}			return workersleft == 0;		}		public function placeTimerStart(event:TimerEvent):void{			if(allPlaced()){				trace("actiontime");				placeTimer.stop();				placeTimer.removeEventListener(TimerEvent.TIMER, placeTimerStart);				if(eventSet) {					trace("i have finished, removing listeners");					removeEventListeners();				}				readyTakeActions();			} else{				if(active.getNext().isHuman()&&active.getNext().workersLeft()>0&&isDone){						trace("am i done? " + isDone);						isDone = false;						placedThisRound=0;					}				if(active.workersLeft() == 0 && (!active.isHuman()||isDone)){					active = active.getNext();				} else if (!active.isHuman()){					placeAt(active.place());					trace(active.getName() + " has placed");					active.updateCount();					active = active.getNext();				} else {					if(active.isHuman() && active.workersLeft()!=0 && !eventSet){ //if you are human and you have ppl and not event set aka your first turn, set them and wait.											if(actionSet) {							trace("first removing listeners if they exist");							removeActionListeners();						}						trace("my first turn, so setting listeners");						setListeners();					} else if(active.isHuman() && active.workersLeft()!=0 && isDone){//otherwise just wait for new click						playScreen.canNewClick(active.getNumber());					}else{ //if you are here, you have ppl on the board					}					placeTimer.stop();				}			}		}						public function place():void {			playScreen.cannotDone();//removes done button			placeTimer=new Timer(1);			//tools first			trace("placing, new timer ");						placeTimer.addEventListener(TimerEvent.TIMER,placeTimerStart);			placeTimer.reset();			placeTimer.start();		//start timer		}		public function readyTakeActions():void{			active = starter;			takeactions();		}		private function checkTurnOver(): void{			playScreen.canActiveClick(active.getNumber());			if(active.peoplePlaced()==0){				active.resetTools();				trace(active.getName() + " have finished actions, next persons turn");				active = active.getNext();				takeactions();			}		}		public function boughtCard(e:ClickEvent):void{			var n:Number = e.area;			var c:Card = getCardAt(n);			paymentArray = active.getPayment();			trace("the payment array is " + paymentArray);			active.pay(paymentArray);//pay for it			active.addCard(c);//add the card, includes getting the benefit			removeImageAtArea(n);			if(c.isCiv()){				if(c.isLottery()){				addEventListener( LotteryResult.LOTTERY, sendLottery );				rollLottery();				playScreen.cannotClick();//active.getBenefit(c); //lottery roll crap				}			} else{				active.scorePoints(paymentArray)//gives points for building			}			if(active.isHuman())checkTurnOver();		}		public function takeactions():void {			active.updateCount();			if(!active.readyToListen()) {				active.addEventListener(ClickEvent.BUY, boughtCard);				active.goListen();			}			trace(" my people: " + active.peoplePlaced());			if(active==starter && active.peoplePlaced()==0) {//if we are all done				trace("all done, feeding time");				feed();			} else{			if(!active.isHuman()) {					trace(active.getName() + " gotta set my listeners");					setAiListeners();				if(actionSet){					trace("goodbye human action listeners");					removeActionListeners();				}				active.addEventListener(NavigationEvent.TURNOVER, nextGuy);				active.takeAction();				trace(active.getName() + " has acted");							} else{				trace("i am a human");				if(!actionSet){					trace("gotta set these action listeners");					setActionListeners();				}				trace("no need for ai listeners");				removeAiListeners();				playScreen.canActiveClick(active.getNumber());			}			}		}		public function nextGuy(e:NavigationEvent):void{			active.updateCount();			active.noListen();			active.removeEventListener(ClickEvent.BUY, boughtCard);			active.removeEventListener(NavigationEvent.TURNOVER, nextGuy);			active = active.getNext();			trace("next guy");			takeactions();		}		public function removeAiListeners():void{			aiListen = false;			for(var i:int= 0; i < players.length; i++){				players[i].removeEventListener( ClickEvent.FARM, ai );				players[i].removeEventListener( ClickEvent.TOOLS, ai );				players[i].removeEventListener( ClickEvent.WOOD, ai );				players[i].removeEventListener( ClickEvent.HUT, ai );				players[i].removeEventListener( ClickEvent.HUNT, ai );				players[i].removeEventListener( ClickEvent.STONE, ai );				players[i].removeEventListener( ClickEvent.BRICK, ai );				players[i].removeEventListener( ClickEvent.GOLD, ai );				players[i].removeEventListener( ClickEvent.C1, ai );				players[i].removeEventListener( ClickEvent.C2, ai );				players[i].removeEventListener( ClickEvent.C3, ai );				players[i].removeEventListener( ClickEvent.C4, ai );				players[i].removeEventListener( ClickEvent.B1, ai );				players[i].removeEventListener( ClickEvent.B2, ai );				players[i].removeEventListener( ClickEvent.B3, ai );				players[i].removeEventListener( ClickEvent.B4, ai );			}		}		public function setAiListeners():void{			aiListen = true;			active.addEventListener( ClickEvent.FARM, ai );			active.addEventListener( ClickEvent.TOOLS, ai );			active.addEventListener( ClickEvent.WOOD, ai );			active.addEventListener( ClickEvent.HUT, ai );			active.addEventListener( ClickEvent.HUNT, ai );			active.addEventListener( ClickEvent.STONE, ai );			active.addEventListener( ClickEvent.BRICK, ai );			active.addEventListener( ClickEvent.GOLD, ai );			active.addEventListener( ClickEvent.C1, ai );			active.addEventListener( ClickEvent.C2, ai );			active.addEventListener( ClickEvent.C3, ai );			active.addEventListener( ClickEvent.C4, ai );			active.addEventListener( ClickEvent.B1, ai );			active.addEventListener( ClickEvent.B2, ai );			active.addEventListener( ClickEvent.B3, ai );			active.addEventListener( ClickEvent.B4, ai );		}		public function removeActionListeners():void{			actionSet = false;			trace(playScreen.hasEventListener(ClickEvent.HUNT) + " 1");			playScreen.removeEventListener( ClickEvent.FARM, actions );			playScreen.removeEventListener( ClickEvent.TOOLS, actions );			playScreen.removeEventListener( ClickEvent.WOOD, actions );			playScreen.removeEventListener( ClickEvent.HUT, actions );			playScreen.removeEventListener( ClickEvent.HUNT, actions );			trace(playScreen.hasEventListener(ClickEvent.HUNT) + " 2");			playScreen.removeEventListener( ClickEvent.STONE, actions );			playScreen.removeEventListener( ClickEvent.BRICK, actions );			playScreen.removeEventListener( ClickEvent.GOLD, actions );			removeEventListener( ClickEvent.C1, actions );			removeEventListener( ClickEvent.C2, actions );			removeEventListener( ClickEvent.C3, actions );			removeEventListener( ClickEvent.C4, actions );			removeEventListener( ClickEvent.B1, actions );			removeEventListener( ClickEvent.B2, actions );			removeEventListener( ClickEvent.B3, actions );			removeEventListener( ClickEvent.B4, actions );			//playScreen.addEventListener( NavigationEvent.DONE, weDonePlacing );			//playScreen.addEventListener( NavigationEvent.OOPS, unplace );			playScreen.cannotClick();		}		public function removeEventListeners():void{			eventSet = false;			trace(playScreen.hasEventListener(ClickEvent.HUNT) + "3");			playScreen.removeEventListener( ClickEvent.FARM, clicked );			playScreen.removeEventListener( ClickEvent.TOOLS, clicked );			playScreen.removeEventListener( ClickEvent.WOOD, clicked );			playScreen.removeEventListener( ClickEvent.HUT, clicked );			playScreen.removeEventListener( ClickEvent.HUNT, clicked );			trace(playScreen.hasEventListener(ClickEvent.HUNT) + "4");			playScreen.removeEventListener( ClickEvent.STONE, clicked );			playScreen.removeEventListener( ClickEvent.BRICK, clicked );			playScreen.removeEventListener( ClickEvent.GOLD, clicked );			removeEventListener( ClickEvent.C1, clicked );			removeEventListener( ClickEvent.C2, clicked );			removeEventListener( ClickEvent.C3, clicked );			removeEventListener( ClickEvent.C4, clicked );			removeEventListener( ClickEvent.B1, clicked );			removeEventListener( ClickEvent.B2, clicked );			removeEventListener( ClickEvent.B3, clicked );			removeEventListener( ClickEvent.B4, clicked );		}		public function setActionListeners():void{			actionSet = true;			trace(playScreen.hasEventListener(ClickEvent.HUNT) + "5");			playScreen.addEventListener( ClickEvent.FARM, actions );			playScreen.addEventListener( ClickEvent.TOOLS, actions );			playScreen.addEventListener( ClickEvent.WOOD, actions );			playScreen.addEventListener( ClickEvent.HUT, actions );			playScreen.addEventListener( ClickEvent.HUNT, actions );			trace(playScreen.hasEventListener(ClickEvent.HUNT) + "6");			playScreen.addEventListener( ClickEvent.STONE, actions );			playScreen.addEventListener( ClickEvent.BRICK, actions );			playScreen.addEventListener( ClickEvent.GOLD, actions );			addEventListener( ClickEvent.C1, actions );			addEventListener( ClickEvent.C2, actions );			addEventListener( ClickEvent.C3, actions );			addEventListener( ClickEvent.C4, actions );			addEventListener( ClickEvent.B1, actions );			addEventListener( ClickEvent.B2, actions );			addEventListener( ClickEvent.B3, actions );			addEventListener( ClickEvent.B4, actions );			//playScreen.addEventListener( NavigationEvent.DONE, weDonePlacing );			//playScreen.addEventListener( NavigationEvent.OOPS, unplace );		}		public function setListeners():void{			eventSet = true;			trace(playScreen.hasEventListener(ClickEvent.HUNT) + "7");			playScreen.addEventListener( ClickEvent.FARM, clicked );			playScreen.addEventListener( ClickEvent.TOOLS, clicked );			playScreen.addEventListener( ClickEvent.WOOD, clicked );			playScreen.addEventListener( ClickEvent.HUT, clicked );			playScreen.addEventListener( ClickEvent.HUNT, clicked );			trace(playScreen.hasEventListener(ClickEvent.HUNT) + "8");			playScreen.addEventListener( ClickEvent.STONE, clicked );			playScreen.addEventListener( ClickEvent.BRICK, clicked );			playScreen.addEventListener( ClickEvent.GOLD, clicked );			addEventListener( ClickEvent.C1, clicked );			addEventListener( ClickEvent.C2, clicked );			addEventListener( ClickEvent.C3, clicked );			addEventListener( ClickEvent.C4, clicked );			addEventListener( ClickEvent.B1, clicked );			addEventListener( ClickEvent.B2, clicked );			addEventListener( ClickEvent.B3, clicked );			addEventListener( ClickEvent.B4, clicked );			playScreen.addEventListener( NavigationEvent.DONE, weDonePlacing );			playScreen.addEventListener( NavigationEvent.OOPS, unplace );			playScreen.canNewClick(active.getNumber());		}		public function removeLast(input:Array){//place:Number, person:Number, amt:Number){			trace("removing last " + input);			var meeple = new Array(input[2]);			trace(meeple.length);			var area:Number = input[0];			for(var i:int = 0; i < GameBoard.areas[area].workers.length; i++){			}						for(var i:int = 0; i < meeple.length; i++){				trace(numChildren + "isbefore");				removeChild(GameBoard.areas[area].lastOfMe(input[1]));				trace(numChildren + "isafter");				placedThisRound--;				GameBoard.areas[area].removelastOfMe(input[1]);				GameBoard.areas[area].unPlace(input[1]);			}			active.updateCount();			playScreen.cannotClickBut(area, active.workersLeft());			if(active.peoplePlaced()==0||placedThisRound==0) {				playScreen.cannotDone();				playScreen.canClick();			}		}		public function placeAt(input:Array){//place:Number, person:Number, amt:Number){			//trace(input);			var meeple = new Array(input[2]);						for(var i:int = 0; i < meeple.length; i++){				meeple[i] = DocumentClass.clone(Game.icons[input[1]+5])			}						var area:Number = input[0];			var emptySlot = GameBoard.areas[area].getCapacity()-GameBoard.areas[area].emptySpots();			var originalSlot = GameBoard.areas[area].getCapacity()-GameBoard.areas[area].emptySpots();			if(area==0) {				var i = 0;				//trace(emptySlot);				while(i!=meeple.length){					meeple[i].x = 106.05-(25*(emptySlot%5));					meeple[i].y = 223-30*Math.floor(emptySlot/5);					i++;					emptySlot++;					//trace(meeple[i].y);				}							} else	if(area==1) {				var i = 0;				while(i!=meeple.length){					switch(emptySlot){						case 0: 							meeple[i].x = 199.95;							meeple[i].y = 79;							break;						case 1:							meeple[i].x = 226.95;							meeple[i].y = 86;							break;						case 2:							meeple[i].x = 207.95;							meeple[i].y = 100;							break;						case 3:							meeple[i].x = 235.95;							meeple[i].y = 104;							break;						case 4:							meeple[i].x = 200.95;							meeple[i].y = 118;							break;						case 5:							meeple[i].x = 226.95;							meeple[i].y = 121;							break;						default:							meeple[i].x = 236.95;							meeple[i].y = 136;							break;					}					i++;					emptySlot++;				}			} else if(area==2) {				var i = 0;				while(i!=meeple.length){					switch(emptySlot){						case 0: 							meeple[i].x = 326.95;							meeple[i].y = 87;							break;						case 2:							meeple[i].x = 352.95;							meeple[i].y = 99;							break;						case 1:							meeple[i].x = 359.95;							meeple[i].y = 82;							break;						case 3:							meeple[i].x = 384.95;							meeple[i].y = 98;							break;						case 4:							meeple[i].x = 386.95;							meeple[i].y = 79;							break;						case 5:							meeple[i].x = 413.95;							meeple[i].y = 84;							break;						default:							meeple[i].x = 418.95;							meeple[i].y = 101;							break;					}					i++;					emptySlot++;				}			} else if(area==3) {				var i = 0;				while(i!=meeple.length){					switch(emptySlot){						case 0: 							meeple[i].x = 629.90;							meeple[i].y = 74;							break;						case 1:							meeple[i].x = 658.9;							meeple[i].y = 76;							break;						case 2:							meeple[i].x = 649.9;							meeple[i].y = 92;							break;						case 3:							meeple[i].x = 677.9;							meeple[i].y = 93;							break;						case 4:							meeple[i].x = 655.9;							meeple[i].y = 108;							break;						case 5:							meeple[i].x = 681.9;							meeple[i].y = 112;							break;						default:							meeple[i].x = 671.9;							meeple[i].y = 134;							break;					}					i++;					emptySlot++;				}			} else if(area==4) {				var i = 0;				while(i!=meeple.length){					switch(emptySlot){						case 0: 							meeple[i].x = 538.95;							meeple[i].y = 195;							break;						case 1:							meeple[i].x = 531.95;							meeple[i].y = 212;							break;						case 2:							meeple[i].x = 566.95;							meeple[i].y = 194;							break;						case 3:							meeple[i].x = 560.95;							meeple[i].y = 209;							break;						case 4:							meeple[i].x = 593.95;							meeple[i].y = 199;							break;						case 5:							meeple[i].x = 586.95;							meeple[i].y = 216;							break;						default:							meeple[i].x = 564.95;							meeple[i].y = 230;							break;					}					i++;					emptySlot++;				}			} else if(area==5) {				meeple[0].x = 184.9;				meeple[0].y = 283;			} else if(area == 7){				meeple[0].x = 374.9;				meeple[0].y = 258;			}else if(area == 6){				var i = 0;				while(i!=meeple.length){					switch(emptySlot){						case 0: 							meeple[i].x = 270.9;							meeple[i].y = 358							break;						default:							meeple[i].x = 245.9;							meeple[i].y = 362;							break;					}					i++;					emptySlot++;				}			} else if(area==8) {				meeple[0].x = 688.95;				meeple[0].y = 417;			} else if(area==9) {				meeple[0].x = 596.95;				meeple[0].y = 417;			} else if(area==10) {				meeple[0].x = 504.95;				meeple[0].y = 417;			} else if(area==11) {				meeple[0].x = 413.95;				meeple[0].y = 417;			} else if(area==12) {				meeple[0].x = 276.00;				meeple[0].y = 442;			} else if(area==13) {				meeple[0].x = 193.00;				meeple[0].y = 442;			} else if(area==14) {				meeple[0].x = 111.00;				meeple[0].y = 442;			} else if(area==15) {				meeple[0].x = 29.00;				meeple[0].y = 442;			} 			for(var i:int = 0; i < meeple.length; i++){				meeple[i].name = String(area) + ";" + String(input[1]) + ";" + String(originalSlot + i);				addChild(meeple[i]);				setChildIndex(meeple[i],numChildren - 1);				trace("before the area was " + GameBoard.areas[area].workers); 				GameBoard.areas[area].place(input[1]);				trace("after the area is " + GameBoard.areas[area].workers); 				GameBoard.areas[area].pushImage(meeple[i]);				//trace(GameBoard.areas[area].returnPicAt(0).name);			}		}		private function feed():void{			active = starter;			for(var i:int= 0; i < players.length; i++){				active.feed();				active.updateCount();				active = active.getNext();			}			newRound();		}		private function newRound():void {			starter.loseStart();			starter = starter.getNext();			trace("the starter is now " + starter.getName());			starter.setStart();			if(emptyStack()||noCards()){				//score();				trace("game over");			} else {				replenishCards();				flipBuildings();				freshUpdateCardIndex();				startPlace();			}		}				private function noCards():Boolean{			var cardsLeft:Number = 0;			for(var i:int = 0; i < boardCards.length; i++){				if(boardCards[i] == -1)					cardsLeft++;//get # of cards bought			}			trace("cards remaining: " + cardlist.length);			trace("cards on board: " + cardsLeft);			return cardlist.length + cardsLeft < 4;		}		private function emptyStack():Boolean{			for(var i:int= 0; i < stack.length; i++){				if(stack[i].length==0) return true;			}			return false;		}		private function replenishCards():void{			var cardsBoughtAmt:Number = 0;			for(var i:int = 0; i < boardCards.length; i++){				if(boardCards[i] == -1)					cardsBoughtAmt++;//get # of cards bought			}			for(var i:int = 0; i < boardCards.length; i++){				var toShift:Number = 0;				if(boardCards[i] != -1){//was not bought					var j:Number = i;					while(j!=0){						if(boardCards[j-1] == -1){							trace("yup it did");							toShift++;						}						j--;					}					var tempCard:MovieClip = (getChildAt(cardChild[i]) as MovieClip);					getChildAt(cardChild[i]).x += 92*(toShift);					//tempCard.x += 92;				}			}			var i:int = boardCards.length - 1;    //int just means a whole number			while ( i > -1 )			{				if ( boardCards[i]==-1 )				{					boardCards.splice( i, 1 );				}				i = i - 1;			}			while(boardCards.length != 4){				boardCards.push(cardlist.shift());			}			trace("replenished board cards, tehy are now " + boardCards);			for(var i:int = 0; i < boardCards.length; i++){				if(!cardInfo[boardCards[i]].isAdded()){					cardInfo[boardCards[i]].add();					trace("yah");					var tempCard:MovieClip = cardInfo[boardCards[i]].getImage();					tempCard.x = 638.95 - i*92;					tempCard.y = 380;					addChild(tempCard);					trace("we're at location " + String(tempCard.x) + " and " + String(tempCard.y));				}			}			c1.width=41.50;			c1.height=41.50;			c1.x = 688.95;			c1.y = 419;			c1.alpha = 0;			addChild(c1);						c2.width=41.50;			c2.height=41.50;			c2.x = 596.95;			c2.y = 419;			c2.alpha = 0;			addChild(c2);						c3.width=41.50;			c3.height=41.50;			c3.x = 504.95;			c3.y = 419;			c3.alpha = 0;			addChild(c3);			c4.width=41.50;			c4.height=41.50;			c4.x = 413.95;			c4.y = 419;			c4.alpha = 0;			addChild(c4);			for(var i:int = 0; i < boardCards.length; i++){				cardInfo[boardCards[i]].setTotal(i+1);			}			c1.addEventListener( MouseEvent.CLICK, onClickC1 );			c2.addEventListener( MouseEvent.CLICK, onClickC2 );			c3.addEventListener( MouseEvent.CLICK, onClickC3 );			c4.addEventListener( MouseEvent.CLICK, onClickC4 );			b1.addEventListener( MouseEvent.CLICK, onClickB1 );			b2.addEventListener( MouseEvent.CLICK, onClickB2 );			b3.addEventListener( MouseEvent.CLICK, onClickB3);			b4.addEventListener( MouseEvent.CLICK, onClickB4);		}		public function onClickC1( event:MouseEvent ):void		{			dispatchEvent( new ClickEvent( ClickEvent.C1 , 8 ) );		}		public function onClickC2( event:MouseEvent ):void		{						dispatchEvent( new ClickEvent( ClickEvent.C2 , 9 ) );		}		public function onClickC3( event:MouseEvent ):void		{						dispatchEvent( new ClickEvent( ClickEvent.C3 , 10 ) );		}		public function onClickC4( event:MouseEvent ):void		{						dispatchEvent( new ClickEvent( ClickEvent.C4 , 11 ) );		}		public function onClickB1( event:MouseEvent ):void		{						dispatchEvent( new ClickEvent( ClickEvent.B1 , 12 ) );		}		public function onClickB2( event:MouseEvent ):void		{						dispatchEvent( new ClickEvent( ClickEvent.B2 , 13 ) );		}		public function onClickB3( event:MouseEvent ):void		{						dispatchEvent( new ClickEvent( ClickEvent.B3 , 14 ) );		}		public function onClickB4( event:MouseEvent ):void		{						dispatchEvent( new ClickEvent( ClickEvent.B4 , 15 ) );		}		private function flipBuildings():void{			trace("stack[0][0] is a number, it is " + stack[0][0]);			var building1:MovieClip = buildingInfo[stack[0][0]].getImage();			building1.x = 255.8;			building1.y = 425.5;			var building2:MovieClip = buildingInfo[stack[1][0]].getImage();			building2.x = 172.8;			building2.y = 425.5;			var building3:MovieClip = buildingInfo[stack[2][0]].getImage();			building3.x = 89.8;			building3.y = 425.5;			var building4:MovieClip = buildingInfo[stack[3][0]].getImage();			building4.x = 6.8;			building4.y = 425.5;			trace("building y is at " + (Math.round(255.8-building4.x)%83==0) + " and is the y true? " + (building4.y==425.5));			for(var i:int= 0; i < stack.length; i++){				addChild(buildingInfo[stack[i][0]].getImage());			}			b1.width=41.50;			b1.height=41.50;			b1.x = 276;			b1.y = 442;			b1.alpha = 0;			addChild(b1);			b2.width=41.50;			b2.height=41.50;			b2.x = 193;			b2.y = 442;			b2.alpha = 0;			addChild(b2);			b3.width=41.50;			b3.height=41.50;			b3.x = 111;			b3.y = 442;			b3.alpha = 0;			addChild(b3);			b4.width=41.50;			b4.height=41.50;			b4.x = 29;			b4.y = 442;			b4.alpha = 0;			addChild(b4);			trace("stack 1 is " + stack[0]);			trace("stack 2 is " + stack[1]);			trace("stack 3 is " + stack[2]);			trace("stack 4 is " + stack[3]);		}				public function makeIcons():void{			var icongroup:Objects = new Objects();			//cards = 34,1			//buildings = 22,1			//icons = 6,5			icons = DocumentClass.cutMe(icongroup, 6, 5);			makeDice();					}		public function makeDice():void{			var dices:DiceFace = new DiceFace();			//cards = 34,1			//buildings = 22,1			//icons = 6,5			var temp:Array;			temp = DocumentClass.cutMe(dices, 1, 7);			for(var i:int = 1; i < temp.length; i++){				var result:Bitmap;				var dface:BitmapData = new BitmapData(temp[0].width, temp[0].height, true,0x000000);				dface.draw(temp[0]);				dface.draw(temp[i]);				result = new Bitmap (dface);				diceFaces.push(result);			}					}		public static function getPlayerCount():int{			return players.length;		}				public static function getDiceFace(amt:Number):Bitmap{			var dface:BitmapData = Game.diceFaces[amt-1].bitmapData.clone();			var result:Bitmap=new Bitmap(dface);			return result;					}				private function getCardAt(area:Number):Card{			var n:Number = area;			var c:Card;			trace("area is " + n);			trace("board cards are " + boardCards);			trace("stack 1 sdf is " + buildingInfo[stack[0][0]]);			trace("stack 2 sdf is " + buildingInfo[stack[1][0]]);			trace("stack 3 sdf is " + buildingInfo[stack[2][0]]);			trace("stack 4 sdf is " + buildingInfo[stack[3][0]]);			if(n<12){				c = cardInfo[boardCards[n-8]];				trace("c is a card " + c);			} else {				c = buildingInfo[stack[n-12][0]];				trace("c is a building " + c);			}			trace("c is a " + c);			return c;		}						public static function getFunctionName():String {				var stack:String = new Error().getStackTrace();				var lines:Array = stack.split("\n");				var line:String = lines[2]; // 0 = Error, 1 = this function				var startIndex:int = line.indexOf("/") + 1;				if (!startIndex) startIndex = line.indexOf("at ") + 3;				var endIndex:int = line.lastIndexOf("(");				return line.substring(startIndex, endIndex);			}				private function makeCards():void{			var a1:Card= new Card(0,0,0,"7 food", "green7");			var a2:Card= new Card(0,0,0,"lottery", "green7");			var a3:Card= new Card(0,0,0,"3 pts", "3xhut");			var a4:Card= new Card(0,0,0,"lottery", "1xhut");			var a5:Card= new Card(0,0,0,"2 food", "2xhut");			var a6:Card= new Card(0,0,0,"lottery", "2xhut");			var a7:Card= new Card(0,0,0,"4 food", "1xhut");			var a8:Card= new Card(0,0,0,"5 food", "green8");			var a9:Card= new Card(0,0,0,"2 anything", "green8");			var a10:Card= new Card(0,0,0,"card", "green1");			var a11:Card= new Card(0,0,0,"lottery", "green1");			var a12:Card= new Card(0,0,0,"temp 4 tool", "1xtools");			var a13:Card= new Card(0,0,0,"lottery", "2xtools");			var a14:Card= new Card(0,0,0,"temp 3 tool", "1xtools");			var a15:Card= new Card(0,0,0,"temp 2 tool", "2xtools");			var a16:Card= new Card(0,0,0,"3 food", "green2");			var a17:Card= new Card(0,0,0,"1 food", "green2");			var a18:Card= new Card(0,0,0,"1 stone", "1xfood");			var a19:Card= new Card(0,0,0,"+1 food", "1xfood");			var a20:Card= new Card(0,0,0,"lottery", "1xfood");			var a21:Card= new Card(0,0,0,"lottery", "2xfood");			var a22:Card= new Card(0,0,0,"3 food", "2xfood");			var a23:Card= new Card(0,0,0,"+1 tool", "green3");			var a24:Card= new Card(0,0,0,"roll 2 gold", "green3");			var a25:Card= new Card(0,0,0,"lottery", "green4");			var a26:Card= new Card(0,0,0,"+1 food", "green4");			var a27:Card= new Card(0,0,0,"2 stone", "green5");			var a28:Card= new Card(0,0,0,"lottery", "green5");			var a29:Card= new Card(0,0,0,"3 pts", "green6");			var a30:Card= new Card(0,0,0,"1 stone", "1xpeople");			var a31:Card= new Card(0,0,0,"1 gold", "1xpeople");			var a32:Card= new Card(0,0,0,"roll 2 wood", "2xfood");			var a33:Card= new Card(0,0,0,"1 clay", "2xpeople");			var a34:Card= new Card(0,0,0,"roll 2 stone", "1xpeople");			var a35:Card= new Card(0,0,0,"lottery", "2xtools");			var a36:Card= new Card(0,0,0,"3 pts", "green6");			cardInfo.push(a1);			cardInfo.push(a2);			cardInfo.push(a3);			cardInfo.push(a4);			cardInfo.push(a5);			cardInfo.push(a6);			cardInfo.push(a7);			cardInfo.push(a8);			cardInfo.push(a9);			cardInfo.push(a10);			cardInfo.push(a11);			cardInfo.push(a12);			cardInfo.push(a13);			cardInfo.push(a14);			cardInfo.push(a15);			cardInfo.push(a16);			cardInfo.push(a17);			cardInfo.push(a18);			cardInfo.push(a19);			cardInfo.push(a20);			cardInfo.push(a21);			cardInfo.push(a22);			cardInfo.push(a23);			cardInfo.push(a24);			cardInfo.push(a25);			cardInfo.push(a26);			cardInfo.push(a27);			cardInfo.push(a28);			cardInfo.push(a29);			cardInfo.push(a30);			cardInfo.push(a31);			cardInfo.push(a32);			cardInfo.push(a33);			cardInfo.push(a34);			cardInfo.push(a35);			cardInfo.push(a36);			for(var i:int = 0; i < cardInfo.length; i++){				cardInfo[i].addImage(cards[i]);			}		}		private function makeBuildings():void{			//1-wood			//2-brick			//3-stone			//4-gold			var a1:Card= new Card(1,1,2);			var a2:Card= new Card(1,1,3);			var a3:Card= new Card(1,2,2);			var a4:Card= new Card(1,1,4);			var a5:Card= new Card(1,2,3);			var a6:Card= new Card(1,2,4);			var a7:Card= new Card(1,3,3);			var a8:Card= new Card(2,2,3);			var a9:Card= new Card(1,3,4);			var a10:Card= new Card(2,2,4);			var a11:Card= new Card(2,3,3);			var a12:Card= new Card(3,3,4);			var a13:Card= new Card(2,3,4);			var a14:Card= new Card(7);			var a15:Card= new Card(4,1);			var a16:Card= new Card(4,2);			var a17:Card= new Card(4,3);			var a18:Card= new Card(4,4);			var a19:Card= new Card(5,1);			var a20:Card= new Card(5,2);			var a21:Card= new Card(5,3);			var a22:Card= new Card(5,4);			var a23:Card= new Card(7);			var a24:Card= new Card(7);			var a25:Card= new Card(1,2,3);			var a26:Card= new Card(1,3,4);			var a27:Card= new Card(1,2,4);			var a28:Card= new Card(2,3,4);			buildingInfo.push(a1);			buildingInfo.push(a2);			buildingInfo.push(a3);			buildingInfo.push(a4);			buildingInfo.push(a5);			buildingInfo.push(a6);			buildingInfo.push(a7);			buildingInfo.push(a8);			buildingInfo.push(a9);			buildingInfo.push(a10);			buildingInfo.push(a11);			buildingInfo.push(a12);			buildingInfo.push(a13);			buildingInfo.push(a14);			buildingInfo.push(a15);			buildingInfo.push(a16);			buildingInfo.push(a17);			buildingInfo.push(a18);			buildingInfo.push(a19);			buildingInfo.push(a20);			buildingInfo.push(a21);			buildingInfo.push(a22);			buildingInfo.push(a23);			buildingInfo.push(a24);			buildingInfo.push(a25);			buildingInfo.push(a26);			buildingInfo.push(a27);			buildingInfo.push(a28);			for(var i:int = 0; i < buildingInfo.length; i++){				buildingInfo[i].addImage(buildings[i]);			}		}	}		}