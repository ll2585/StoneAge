package{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import Classes.CardWindow;

	public class PlayerBoard extends MovieClip 	{		private var totalPeople:Number;		private var curPeople:Number;		private var peopleIndicator:MovieClip;		private var foodIndicator:MovieClip;		private var woodIndicator:MovieClip;		private var brickIndicator:MovieClip;		private var stoneIndicator:MovieClip;		private var goldIndicator:MovieClip;		private var incomeIndicator:MovieClip;		private var tools:Array;		private var toolImages:Array;		private var buildingsIndicator:MovieClip;		private var chiefIndicator:MovieClip;		private var icons:Array;		private var myName:String;		private var myScore:Number;		private var income:Number;		private var cards:Array;		private var buildings:Array;		private var resources:Array;		private var cardWindow:CardWindow;		private var buildWindow:BuildingWindow;				public function PlayerBoard(pName:String, number:Number)		{			makeIcons();			cards = new Array();			buildings = new Array();			var square:Shape = new Shape();			square.graphics.beginFill(0x000000);			square.graphics.drawRect(0, 0, 250, 170);			var myColor:ColorTransform = square.transform.colorTransform;			peopleIndicator=icons[number+5];			addChild(peopleIndicator);			peopleIndicator.x = 11;			peopleIndicator.y = 48;			foodIndicator=icons[0];			addChild(foodIndicator);			foodIndicator.x = 70;			foodIndicator.y = 48;			woodIndicator=icons[1];			addChild(woodIndicator);			woodIndicator.x = 11;			woodIndicator.y = 87;			brickIndicator=icons[2];			addChild(brickIndicator);			brickIndicator.x = 70;			brickIndicator.y = 87;			stoneIndicator=icons[3];			addChild(stoneIndicator);			stoneIndicator.x = 127;			stoneIndicator.y = 87;			goldIndicator=icons[4];			addChild(goldIndicator);			goldIndicator.x = 183;			goldIndicator.y = 87;			incomeIndicator=icons[10];			addChild(incomeIndicator);			incomeIndicator.x = 135;			incomeIndicator.y = 48;			buildingsIndicator=icons[12];			addChild(buildingsIndicator);			buildingsIndicator.x = 11;			buildingsIndicator.y = 124;			if(number==1){			myColor.color = 0x0000FF;			} else if(number == 2){			myColor.color = 0x0FF0000;			} else if(number==3){			myColor.color = 0xFFFF00;			} else {			myColor.color = 0x00FF00;			}			square.transform.colorTransform = myColor;			addChild(square);			setChildIndex(square,0);			totalPeople = 5;			myScore = 0;			curPeople = totalPeople;			myName = pName;			tools = new Array(0,0,0);			toolImages = new Array(3);			resources = new Array(0, 0, 0, 0, 0);			updateCounts();			cardButton.visible=false;			buildingButton.visible=false;		}				public function updateCounts():void{			peopleCount.text = curPeople.toString();			totalMeeps.text = totalPeople.toString();			playerName.text = myName;			score.text = myScore.toString();			incomeCount.text = income.toString();			foodCount.text = resources[0].toString();			woodCount.text = resources[1].toString();			brickCount.text = resources[2].toString();			stoneCount.text = resources[3].toString();			goldCount.text = resources[4].toString();			for(var i:int = 0; i < tools.length; i++){//tool 1=12, tool 2=13, tool 3=14, tool 4=15				if(tools[i] != 0){					toolImages[i] = DocumentClass.clone(Game.icons[tools[i]+12]);					switch(i)					{						case 0:							toolImages[i].x = 70;							toolImages[i].y = 124;							addChild(toolImages[i]);							break;						case 1:							toolImages[i].x = 127;							toolImages[i].y = 124;							addChild(toolImages[i]);							break;						default:							toolImages[i].x = 183;							toolImages[i].y = 124;							addChild(toolImages[i]);							break;					}				}			}		}				public function setResources(resourceArray:Array):void{			resources = resourceArray;		}		public function setPoints(p:Number):void{			myScore = p;		}		public function setPeople(total:Number, left:Number):void{			totalPeople = total;			curPeople = left;		}		public function setIncome(total:Number):void{			income = total;		}		public function setTools(toolArray:Array):void{			tools=toolArray;		}		private function addPeople(count:Number):void{			totalPeople++;			totalMeeps.text = totalPeople.toString();		}		public function setBuildings(b:Array):void{			buildings = b;			if(buildings.length>0 && !buildingButton.visible){				buildingButton.visible = true;				buildingButton.addEventListener( MouseEvent.CLICK, buildPopUp );				}		}		public function setCards(c:Array):void{			cards = c;			if(cards.length>0 && !cardButton.visible){				cardButton.visible = true;				cardButton.addEventListener( MouseEvent.CLICK, cardPopUp );				}		}		public function cardPopUp(e:MouseEvent):void{		 	cardWindow = new CardWindow(cards);			stage.addChild(cardWindow);			stage.setChildIndex(cardWindow,stage.numChildren - 1);			cardWindow.x = 0;			cardWindow.y = 0;			cardWindow.alpha = .9;			cardWindow.addEventListener( NavigationEvent.CLOSESCREEN, noScreen );		}		private function noScreen(e:NavigationEvent):void{			stage.removeChild(cardWindow);		}		public function buildPopUp(e:MouseEvent):void{			buildWindow = new BuildingWindow(buildings);			stage.addChild(buildWindow);			stage.setChildIndex(buildWindow,stage.numChildren - 1);			buildWindow.x = 0;			buildWindow.y = 0;			buildWindow.alpha = .9;			buildWindow.addEventListener( NavigationEvent.CLOSESCREEN, noBScreen );		}		private function noBScreen(e:NavigationEvent):void{			stage.removeChild(buildWindow);		}		public function makeIcons():void{			var icongroup:Objects = new Objects();			//cards = 34,1			//buildings = 22,1			//icons = 6,5			icons = DocumentClass.cutMe(icongroup, 6, 5);					}			}}