package {	//Avoider Game Tutorial, by Michael James Williams	//http://gamedev.michaeljameswilliams.com		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.geom.Point;	import flash.geom.Matrix;	import flash.display.BitmapData;	import flash.display.Bitmap;	public class DocumentClass extends MovieClip 	{		public var game:Game;		public var menuScreen:MainScreen;		//public var gameOverScreen:GameOverScreen;		public var loadingProgress:LoadingProgress;						public function DocumentClass() 		{			loadingProgress = new LoadingProgress();			loadingProgress.x = 200;			loadingProgress.y = 150;			addChild( loadingProgress );			loaderInfo.addEventListener( Event.COMPLETE, onCompletelyDownloaded );			loaderInfo.addEventListener( ProgressEvent.PROGRESS, onProgressMade );								}				public function onCompletelyDownloaded( event:Event ):void		{			gotoAndStop(3);						showMenuScreen();					}				public function onProgressMade( progressEvent:ProgressEvent ):void		{			loadingProgress.setValue( Math.floor( 100 * loaderInfo.bytesLoaded / loaderInfo.bytesTotal ) );		}				public function showMenuScreen():void		{						menuScreen = new MainScreen();			menuScreen.addEventListener( NavigationEvent.START, onRequestStart );			menuScreen.x = 0;			menuScreen.y = 0;			addChild( menuScreen );						}				/*public function onAvatarDeath( avatarEvent:AvatarEvent ):void		{			var finalScore:Number = playScreen.getFinalScore();			var finalClockTime:Number = playScreen.getFinalClockTime();						gameOverScreen = new GameOverScreen();			gameOverScreen.addEventListener( NavigationEvent.RESTART, onRequestRestart );			gameOverScreen.x = 0;			gameOverScreen.y = 0;			gameOverScreen.setFinalScore( finalScore );			gameOverScreen.setFinalClockTime( finalClockTime );			addChild( gameOverScreen );						playScreen = null;		}		*/		public function onRequestStart( navigationEvent:NavigationEvent ):void		{			game = new Game();			//playScreen.addEventListener( AvatarEvent.DEAD, onAvatarDeath );						//playScreen.makeAreas();			addChild(game);			menuScreen = null;		}				public static function cutMe(source:MovieClip, row:Number, col:Number):Array{			var iconheight:int=Math.ceil(source.height/col);			var iconwidth:int=Math.ceil(source.width/row);			var mat:Matrix;			var bitmap_data:BitmapData;			var point:Point;			var clip:MovieClip;			var clips_array:Array			clips_array=new Array();			for(var i:int=0;i < col;i++)			{				for(var j:int=0;j < row;j++)				{					bitmap_data=new BitmapData(iconwidth,iconheight,true,0x00FFFFFF);					mat=source.transform.matrix;					mat.translate(-iconwidth*j,-iconheight*i);					bitmap_data.draw(source,mat);										clip=new MovieClip();					clips_array.push(clip);					var bitmap:Bitmap=new Bitmap(bitmap_data);					clip.addChild(bitmap);				}			}			return clips_array;		}				/*private function taglia():void		{			icons = new Objects();			var ww:int=Math.ceil(icons._width/row);			var hh:int=Math.ceil(icons._height/col);			var mat:Matrix;			var bitmap_data:BitmapData;			var point:Point;			var clip:MovieClip;						for(var i:int=0;i < col;i++)			{				for(var j:int=0;j < row;j++)				{					bitmap_data=new BitmapData(ww,hh,true,0x00FFFFFF);					mat=image_mc.transform.matrix;					mat.translate(-ww*j,-hh*i);					bitmap_data.draw(image_mc,mat);										clip=new MovieClip();					clips_array.push(clip);					addChild(clip);					point=new Point(image_mc.x+ww*j+1*j,image_mc.y+hh*i+1*i);										var bitmap:Bitmap=new Bitmap(bitmap_data);					clip.addChild(bitmap);					clip.x=point.x;					clip.y=point.y;				}			}		}				private function callStartTimer():void		{			timer=new Timer(4000,1);			timer.addEventListener(TimerEvent.TIMER,startTimer);			timer.start();		}		public function onRequestRestart( navigationEvent:NavigationEvent ):void		{			restartGame();		}				public function restartGame():void		{			playScreen = new GameBoard();			//playScreen.addEventListener( AvatarEvent.DEAD, onAvatarDeath );			playScreen.x = 0;			playScreen.y = 0;			addChild( playScreen );						gameOverScreen = null;		}		*/		public static function shuffle(array) {			var m = array.length, t, i;						// While there remain elements to shuffle…			while (m) {								// Pick a remaining element…				i = Math.floor(Math.random() * m--);								// And swap it with the current element.				t = array[m];				array[m] = array[i];				array[i] = t;			}						return array;		}		public static function clone(clip:MovieClip):Bitmap{			var result:Bitmap;			var toclone:BitmapData = new BitmapData(clip.width, clip.height, true,0x000000);			toclone.draw(clip);			result = new Bitmap (toclone);			return result;		}	}}